Aim:To solve the A* Search problem using python.
Algorithm:
1. **Initialize**:
   - Create an open list (priority queue) to store nodes to explore.
   - Create a closed list to store already evaluated nodes.
   - Add the starting node to the open list with its initial cost $$ f(n) = g(n) + h(n) $$.

2. **While the open list is not empty**:
   - Remove the node with the lowest $$ f(n) $$ value from the open list.
   - If this node is the goal node, reconstruct and return the path.
   - Move the node to the closed list.
   - For each neighbor of the current node:
     - Calculate $$ g(n) $$, the cost from the start node to this neighbor.
     - Calculate $$ h(n) $$, the estimated cost from this neighbor to the goal.
     - Calculate $$ f(n) = g(n) + h(n) $$.
     - If the neighbor is in the closed list and the new $$ g(n) $$ is lower, update its cost and parent.
     - If the neighbor is not in both lists or has a lower $$ g(n) $$, add it to the open list.

3. **Return**:
   - The path from start to goal if found; otherwise, indicate no path exists.

###  Code:
```python
import heapq

class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g  # Cost from start to this node
        self.h = h  # Heuristic cost from this node to goal
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def a_star(graph, start, goal, heuristic):
    open_list = []
    closed_list = set()
    
    start_node = Node(start, None, 0, heuristic[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.name)

        for neighbor in graph[current_node.name]:
            if neighbor in closed_list:
                continue
            
            g_cost = current_node.g + graph[current_node.name][neighbor]
            h_cost = heuristic[neighbor]
            neighbor_node = Node(neighbor, current_node, g_cost, h_cost)

            if any(node.name == neighbor and node.g <= g_cost for node in open_list):
                continue
            
            heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example graph represented as an adjacency list with costs
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'D': 2, 'E': 5},
    'C': {'A': 4, 'D': 1},
    'D': {'B': 2, 'C': 1, 'E': 3},
    'E': {'B': 5, 'D': 3}
}

# Heuristic values (straight-line distance estimates)
heuristic = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 1,
    'E': 0
}

# Perform A* search from A to E
path = a_star(graph, 'A', 'E', heuristic)

# Print results
print("Path found:", path)
```

### Sample Output

When you run this code, you should see output similar to this:

```plaintext
Path found: ['A', 'B', 'D', 'E']
```
Result:thus we solved a* search program using python.
